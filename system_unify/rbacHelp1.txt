假设我们有一个 User 模型，一个 Role 模型和一个 Permission 模型。每个用户可以拥有多个角色，每个角色可以拥有多个权限。

在这种情况下，你可以在 User 模型中建立与 Role 的关联以及在 Role 模型中建立与 Permission 的关联。

User模型:

public function roles()
{
    return $this->belongsToMany(Role::class);
}
Role模型:

public function permissions()
{
    return $this->belongsToMany(Permission::class);
}
然后在 CheckClient 中间件中，我们可以查询用户拥有的所有权限，然后检查这些权限中是否存在与 redirect_uri 匹配的权限。

public function handle($request, Closure $next)
{
    $user = Auth::user();
    $redirectUri = $request->get('redirect_uri');

    //查询出用户的所有权限
    $permissions = $user->roles()->with('permissions')->get()->pluck('permissions')->flatten()->pluck('redirect_uri')->toArray();

    //检查当前redirectUri是否在权限范围内
    $hasPermission = in_array($redirectUri, $permissions);
    if(!$hasPermission){
        abort(403,'Unauthorized action.');
    }
    return $next($request);
}
如果你只有一个权限表，直接链接用户和权限，那么你可以在 User 模型中添加一个 permissions 关联，然后在中间件中直接使用 Auth::user()->permissions 来获取权限。此处代码的理解和实现根据情况可能有所不同。
